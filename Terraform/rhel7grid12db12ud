#!/usr/bin/env bash


#  GLOBAL CHANGES
echo "alias cio='tail -f /var/log/messages | grep --line-buffered cloud-init'" >> /root/.bash_profile

#  ami-d291e2b3 error fix: "-bash: TMOUT: readonly variable"
#  The TMOUT variable is set both in /etc/profile.d/tmout.sh and /etc/profile.
sed -i.bu '/TMOUT/d' /etc/profile

#  remove password expiration from ec2-user
chage -M -1 -E -1 ec2-user


#  VARIABLES
GRID_HOME=/u01/app/grid/12.2.0.1
ORACLE_HOME=/u01/app/oracle/product/12.2.0.1/db
RMAN_S3_BUCKET=rman-test


#  OPERATING SYSTEM CHANGES
#  packages
yum-config-manager --enable rhui-REGION-rhel-server-optional
yum clean all
yum update -y
yum install cloud-utils-growpart -y
yum install firewalld -y
yum install jq -y
yum install nvme-cli -y
yum install psmisc -y
yum install sssd -y
yum install tmux -y
yum install wget -y
yum install unzip -y
yum install zip -y
yum install zstd -y
yum install bc -y
yum install compat-libcap1.x86_64 -y
yum install compat-libstdc++-33.x86_64 -y
yum install gcc -y
yum install gcc-c++ -y
yum install glibc-devel.x86_64 -y
yum install java-1.8.0 -y
yum install kmod-oracleasm -y
yum install ksh -y
yum install libaio.x86_64 -y
yum install libaio-devel.x86_64 -y
yum install libstdc++-devel.x86_64 -y
yum install libxcb.x86_64 -y
yum install libX11.x86_64 -y
yum install libXau.x86_64 -y
yum install libXi.x86_64 -y
yum install libXtst.x86_64 -y
yum install libXrender.x86_64 -y
yum install libXrender-devel.x86_64 -y
rpm -Uvh http://download.oracle.com/otn_software/asmlib/oracleasmlib-2.0.12-1.el7.x86_64.rpm
rpm -Uvh https://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracleasm-support-2.1.11-2.el7.x86_64.rpm
yum install nfs-utils.x86_64 -y
yum install smartmontools.x86_64 -y
yum install sysstat.x86_64 -y

#  awscli
if [ ! -x "$( command -v "aws" )" ]; then

        curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        unzip awscli-bundle.zip
        ./awscli-bundle/install -i ~/.local/aws -b /bin/aws
        mkdir ~/.aws

cat <<EOT > ~/.aws/config
[default]
region = us-gov-west-1
EOT

fi

INSTANCE_ID=$(curl -s "http://169.254.169.254/latest/meta-data/instance-id")

#  hostname
AWSTAGS=$( aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" )

INSTANCE_HOSTNAME=$( echo $AWSTAGS | jq -r '.[][] | select(.Key == "Name") | .Value' | tr '[:upper:]' '[:lower:]' )
INSTANCE_ENV=$( echo $AWSTAGS | jq -r '.[][] | select(.Key == "env") | .Value' | tr '[:upper:]' '[:lower:]' )

IP_ADDRESS=$( curl -s "http://169.254.169.254/latest/meta-data/local-ipv4" )

DNSNAME=$INSTANCE_HOSTNAME.$INSTANCE_ENV.vbms.aide.oit.va.gov
hostnamectl set-hostname $DNSNAME
echo "$IP_ADDRESS   $DNSNAME $INSTANCE_HOSTNAME" >> /etc/hosts
echo "HOSTNAME=$DNSNAME" >> /etc/sysconfig/network

#  dns
#  ami-d291e2b3 error fix: Job for sssd.service failed because the control process exited with error code.
mv /etc/sssd/sssd.conf /etc/sssd/sssd.conf_removed

service sssd start

REV_IP=$( echo $IP_ADDRESS | awk -F'.' '{print $4,".",$3,".",$2,"."$1}' | tr -d [:space:] )
REV_ZONE=$( echo $IP_ADDRESS | awk -F'.' '{print $3,".",$2,"."$1}' | tr -d [:space:] )

cat <<EOT > register_host.txt
update delete $DNSNAME A
update add $DNSNAME 86400 A $IP_ADDRESS

zone $REV_ZONE.in-addr.arpa
update delete $REV_IP.in-addr.arpa PTR

zone $REV_ZONE.in-addr.arpa
update add $REV_IP.in-addr.arpa 86400 PTR $DNSNAME

send
EOT

nsupdate register_host.txt

#  firewalld
systemctl mask iptables
systemctl enable firewalld
service firewalld start
firewall-cmd --add-port=1521/tcp --set-short="Incoming Rule for Database" --permanent
firewall-cmd --add-port=3872/tcp --set-short="Incoming Rule for OEM Agent" --permanent

#  disable ipv6
cat <<EOT >/etc/sysctl.d/96-disableipv6-sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
EOT

sysctl --system

#  users
groupadd -g 5001 oinstall
groupadd -g 5002 dba
useradd -u 5000 -g oinstall -G dba oracle
chage -M -1 -E -1 oracle

echo "umask 022" >> /home/oracle/.bash_profile

#  DISK CHANGES
AWSVOLUMES=$( aws ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" )

TOTAL_VOLUMES=$( echo $AWSVOLUMES | jq -r '.[][] | .VolumeId' | wc -l  )
INUSE_VOLUMES=-1
    
until [ "$INUSE_VOLUMES" -eq "$TOTAL_VOLUMES" ]; do
      
    INUSE_VOLUMES=$( aws ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" "Name=status,Values=in-use" --query 'Volumes[*].Attachments[*].VolumeId' --output text | wc -l )
    sleep 5

done

#  symlink NVMe to block
AWSVOLUMES=$( aws ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" )

for i in `seq 0 26`; do
    BLOCK_DEVICE="/dev/nvme$${i}n1"

    if [ -e $BLOCK_DEVICE ]; then

        VOLUME_ID=$( nvme id-ctrl $BLOCK_DEVICE | grep sn | awk '{ print $3 }' | sed -r -e 's/^.{3}/&-/' )

        MAPPING_DEVICE=$( echo $AWSVOLUMES | jq -r --arg V "$VOLUME_ID" '.[][] | .Attachments[] | select(.VolumeId == $V) | .Device' )

        if [[ "$MAPPING_DEVICE" != /dev/* ]]; then
            MAPPING_DEVICE="/dev/$MAPPING_DEVICE"
        fi

        if [ -e $MAPPING_DEVICE ]; then
            echo "path exists: $MAPPING_DEVICE"

        else
            echo "symlink created: $BLOCK_DEVICE to $MAPPING_DEVICE"
            ln -s $BLOCK_DEVICE $MAPPING_DEVICE
        fi

    fi
done

#  partition unformatted volumes
VOLUMES=$( echo $AWSVOLUMES | jq -r '.[][] | .Attachments[] | .Device' | sort )
VOLARRAY=( $VOLUMES )

for V in "$${VOLARRAY[@]}"; do 
        DEVICE=$( readlink -f $V )
        if [ "$( file -b -s $DEVICE )" == "data" ]; then
                 echo -e "o\nn\np\n1\n\n\nw" | fdisk "$DEVICE"
        fi
done

#  mount /u01, format if necessary
DEVICE_sdo=$( readlink -f /dev/sdo )
P=$( lsblk -nl $DEVICE_sdo -o NAME,TYPE | grep part | cut -d ' ' -f1 )
NEW_u01=false

if [ -n "$P" ]; then
        mkdir /u01

        PARTITION="/dev/$P"

        if [ "$( file -b -s $PARTITION )" == "data" ]; then
                mkfs -t ext4 $PARTITION
                NEW_u01=true
        fi

        UUID=$( blkid | grep $PARTITION | awk -F' UUID=\"' '{ print $2 }' | awk -F"\"" '{ print $1 }' )
        echo "UUID=$UUID /u01                    ext4    defaults,nofail 0 2" >> /etc/fstab
        mount -a
fi

#  mount backup, format if necessary
DEVICE_sdn=$( readlink -f /dev/sdn )
P=$( lsblk -nl $DEVICE_sdn -o NAME,TYPE | grep part | cut -d ' ' -f1 )
NEW_diag=false

if [ -n "$P" ]; then
        mkdir /diag
        
        PARTITION="/dev/$P"

        if [ "$( file -b -s $PARTITION )" == "data" ]; then
                mkfs -t ext4 $PARTITION
                NEW_diag=true
        fi

        UUID=$( blkid | grep $PARTITION | awk -F' UUID=\"' '{ print $2 }' | awk -F"\"" '{ print $1 }' )
        echo "UUID=$UUID /diag                   ext4    defaults,nofail 0 2" >> /etc/fstab
        mount -a
fi

#  mount efs volumes
: '
%{ if export_mount_efs_dns_name != "" }
        echo "${export_mount_efs_dns_name}:/ /vbms-exports nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 0 0" >> /etc/fstab
        mkdir -p /vbms-exports
        mount -a
        chmod g+rws /vbms-exports
%{ endif }

%{ if vbb_bfi_mount_efs_dns_name != "" }
        echo "${vbb_bfi_mount_efs_dns_name}:/ /vbb-bfi nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 0 0" >> /etc/fstab
        mkdir -p /vbb-bfi
        mount -a
        chmod g+rws /vbb-bfi
%{ endif }
'
%{ if dbshare_mount_efs_dns_name != "" }
        echo "${dbshare_mount_efs_dns_name}:/ /dbshare nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 0 0" >> /etc/fstab
        mkdir -p /dbshare
        mount -a
        chmod g+rws /dbshare
%{ endif }


#  ORACLE CHANGES
#  sysctl
SHMALL=$( expr $( grep MemTotal /proc/meminfo | awk '{ print $2 }' ) \* 1024 / 4096 \* 4 / 10 )
SHMMAX=$( expr $( grep MemTotal /proc/meminfo | awk '{ print $2 }' ) \* 1024 \* 5 / 10 )

cat <<EOT >/etc/sysctl.d/97-oracledatabase-sysctl.conf
fs.aio-max-nr = 1048576
fs.file-max = 6815744
kernel.shmall = $SHMALL
kernel.shmmax = $SHMMAX
kernel.shmmni = 4096
kernel.sem = 250 32000 100 128
net.ipv4.ip_local_port_range = 9000 65500
net.core.rmem_default = 262144
net.core.rmem_max = 4194304
net.core.wmem_default = 262144
net.core.wmem_max = 1048576
EOT

sysctl --system

#  limits 
cat <<EOT > /etc/security/limits.d/97-oracledatabase-limits.conf
oracle           soft    nofile          1024
oracle           hard    nofile          65536
oracle           soft    nproc           2047
oracle           hard    nproc           16384
oracle           soft    stack           10240
oracle           hard    stack           32768
oracle           soft    memlock         3145728
oracle           hard    memlock         3145728
EOT

#  oraInst
cat <<EOT > /etc/oraInst.loc
inventory_loc=/u01/app/oraInventory
inst_group=oinstall
EOT

#  oracle directory structure
if $NEW_u01; then
        mkdir -p /u01/app/oraInventory
        mkdir -p /u01/app/grid
        mkdir -p /u01/app/oracle
        chown -R oracle:oinstall /u01/app/oraInventory
        chown -R oracle:oinstall /u01/app/grid
        chown -R oracle:oinstall /u01/app/oracle
        chmod -R 775 /u01
fi

if $NEW_diag; then
        if [[ -d /u01/app/oracle/diag ]]; then
                mv /u01/app/oracle/diag/* /diag
                rmdir /u01/app/oracle/diag
        fi   
fi

chown oracle:oinstall /diag
chmod 775 /diag 

if [[ -d $GRID_HOME && -d $ORACLE_HOME ]]; then
        ln -s /diag /u01/app/oracle
fi

#  Oracle Grid Infrastructure
if [[ -f $GRID_HOME/root.sh ]]; then

        if [[ -d "/u01/app/oracle/crsdata/$INSTANCE_HOSTNAME" ]]; then
                $GRID_HOME/perl/bin/perl -I $GRID_HOME/perl/lib -I $GRID_HOME/crs/install $GRID_HOME/crs/install/roothas.pl -deconfig -force
        fi

        $GRID_HOME/perl/bin/perl -I $GRID_HOME/perl/lib -I $GRID_HOME/crs/install $GRID_HOME/crs/install/roothas.pl
        $GRID_HOME/root.sh
        $GRID_HOME/bin/srvctl add listener -l LISTENER
        $GRID_HOME/bin/srvctl start listener
        $GRID_HOME/bin/crsctl modify resource ora.LISTENER.lsnr -attr AUTO_START=always -unsupported

fi

#  oracleasm
oracleasm configure -u oracle -g dba -e -s y 
oracleasm init
oracleasm scandisks

#  ASM
if [ -z "$( ls -A /dev/oracleasm/disks )" ]; then

        DATA_COUNT=1
        FRA_COUNT=1

        for I in "$${!VOLARRAY[@]}"; do 
                VOLTAG=$( echo $AWSVOLUMES | jq -r --arg V "$${VOLARRAY[$I]}" '.Volumes[] | select(.Attachments[].Device == $V) | .Tags[] | select(.Key == "Name") | .Value' )
        
                L=$( readlink -f $${VOLARRAY[$I]} )
                P=$( lsblk -nl $L -o NAME,TYPE | grep part | cut -d ' ' -f1 )
                PARTITION="/dev/$P"

                if [[ "$VOLTAG" == *"-DATA-"* ]]; then
                        oracleasm createdisk "DATA$DATA_COUNT" "$PARTITION" 
                        ((DATA_COUNT++))
                elif [[ "$VOLTAG" == *"-FRA-"* ]]; then
                        oracleasm createdisk "FRA$FRA_COUNT" "$PARTITION" 
                        ((FRA_COUNT++))
                else
                        echo "$PARTITON is not used in DATA or FRA"
                fi
        done

        oracleasm scandisks

        if [[ -f $GRID_HOME/root.sh ]]; then

        echo "GRID_HOME=$GRID_HOME" > /home/oracle/configureASM.sh

echo '
PASSWORD_SYS=$( < /dev/urandom tr -dc A-Za-z | head -c1 )$( < /dev/urandom tr -dc A-Za-z0-9 | head -c15 )
PASSWORD_ASM=$( < /dev/urandom tr -dc A-Za-z | head -c1 )$( < /dev/urandom tr -dc A-Za-z0-9 | head -c15 )

DISKLIST_DATA=$( ls -dm /dev/oracleasm/disks/DATA* | tr -d "'"[:space:]"'" )
DISKLIST_FRA=$( ls -dm /dev/oracleasm/disks/FRA* | tr -d "'"[:space:]"'" )

$GRID_HOME/bin/asmca -silent -configureASM \
-sysAsmPassword "$PASSWORD_SYS" \
-asmsnmpPassword "$PASSWORD_ASM" \
-diskString "'"/dev/oracleasm/disks/*"'" \
-diskGroupName DATA \
-diskList "$DISKLIST_DATA" \
-redundancy EXTERNAL \
-param audit_sys_operations=FALSE \
-au_size 4

$GRID_HOME/bin/asmca -silent -createDiskGroup \
-sysAsmPassword "$PASSWORD_SYS" \
-diskString "'"/dev/oracleasm/disks/*"'" \
-diskGroupName FRA \
-diskList "$DISKLIST_FRA" \
-redundancy EXTERNAL \
-au_size 4
' >> /home/oracle/configureASM.sh

        chmod +x /home/oracle/configureASM.sh
        su - oracle /home/oracle/configureASM.sh

        fi

else

         if [[ -f $GRID_HOME/root.sh ]]; then

        $GRID_HOME/bin/crsctl start res ora.cssd -init

        echo "GRID_HOME=$GRID_HOME" > /home/oracle/configureASM.sh
        echo "DB_HOME=$ORACLE_HOME" >> /home/oracle/configureASM.sh

echo '
$GRID_HOME/bin/srvctl add asm
$GRID_HOME/bin/srvctl start asm

echo "+ASM:$GRID_HOME:N" >> /etc/oratab

. /usr/local/bin/oraenv <<< +ASM

sqlplus /nolog <<EOF
connect / as sysasm
alter diskgroup DATA mount;
alter diskgroup FRA mount;
EOF

ASMSPFILE=$( asmcmd ls -t +DATA/ASM/ASMPARAMETERFILE | head -1 )
$GRID_HOME/bin/srvctl modify asm -diskstring "'"/dev/oracleasm/disks/*"'"
$GRID_HOME/bin/srvctl modify asm -pwfile "'"+DATA/orapwasm"'"
$GRID_HOME/bin/srvctl modify asm -spfile "'"+DATA/ASM/ASMPARAMETERFILE/\$ASMSPFILE"'"

DATABASES=$( asmcmd ls +FRA | sed "'"s/\///"'" | sort | tr "'"[:lower:]"'" "'"[:upper:]"'" )
DBARRAY=( $DATABASES )

for DB in "$${DBARRAY[@]}"; do
	DBSPFILE=$( asmcmd ls -t +DATA/$DB/PARAMETERFILE | head -1 )
	$GRID_HOME/bin/srvctl add database -db $DB -oraclehome $DB_HOME -spfile "'"+DATA/\$DB/PARAMETERFILE/\$DBSPFILE"'"
done

$GRID_HOME/bin/crsctl stop has -f
$GRID_HOME/bin/crsctl start has
' >> /home/oracle/configureASM.sh

        chmod +x /home/oracle/configureASM.sh
        su - oracle /home/oracle/configureASM.sh

        $GRID_HOME/bin/crsctl modify resource ora.asm -attr AUTO_START=always -unsupported

        fi

fi

#  Oracle Database
if [[ -f $ORACLE_HOME/root.sh ]]; then
        $ORACLE_HOME/root.sh
fi

if [[ ! -f $ORACLE_HOME/dbs/osbws.ora && -f $ORACLE_HOME/root.sh ]]; then

        echo "ORACLE_HOME=$ORACLE_HOME" > /home/oracle/configureOSBWS.sh

echo '
IAMROLE=$( curl http://169.254.169.254/latest/meta-data/iam/security-credentials )

wget -P /home/oracle http://10.247.101.100/osbws_install.jar
java -jar osbws_install.jar -IAMRole $IAMROLE -libDir $ORACLE_HOME/lib/ -walletDir $ORACLE_HOME/dbs/ -configFile $ORACLE_HOME/dbs/osbws.ora -awsEndPoint s3.us-gov-west-1.amazonaws.com -location us-gov-west-1 -useHttps 
' >> /home/oracle/configureOSBWS.sh

        echo "echo \"OSB_WS_BUCKET=$RMAN_S3_BUCKET\" >> $ORACLE_HOME/dbs/osbws.ora" >> /home/oracle/configureOSBWS.sh

        chmod +x /home/oracle/configureOSBWS.sh
        su - oracle /home/oracle/configureOSBWS.sh

fi

#  Enterprise Manager Agent
: '
if [[ -f $GRID_HOME/root.sh && -f $ORACLE_HOME/root.sh ]]; then

        mount -o remount,exec /tmp
        curl "https://10.247.101.166:7802/em/install/getAgentImage" --insecure -o /home/oracle/AgentPull.sh
        chown oracle:oinstall /home/oracle/AgentPull.sh
        chmod +x /home/oracle/AgentPull.sh

cat <<EOT > /home/oracle/AgentPull.rsp
LOGIN_USER=SCRIPT
LOGIN_PASSWORD=AyTJmXNHmDhEMxGxnqGsSJCF
PLATFORM="Linux x86-64"
AGENT_REGISTRATION_PASSWORD=rRwhte7o9Ec2PbOt
AGENT_BASE_DIR=/u01/app/oracle/agent
ORACLE_HOSTNAME=$( hostname | cut -d "." -f1 | tr '[:lower:]' '[:upper:]' ).$( hostname | cut -d "." -f2- | tr '[:upper:]' '[:lower:]' )
EOT

        chown oracle:oinstall /home/oracle/AgentPull.rsp
        sudo -u oracle /home/oracle/AgentPull.sh RSPFILE_LOC=/home/oracle/AgentPull.rsp

        /u01/app/oracle/agent/agent_13.3.0.0.0/root.sh

fi
'
: '
#  TEAM CHANGES

#  Splunk

wget http://repo.live.aide.oit.va.gov/splunk-forwarder-latest.rpm -P /tmp
rpm -ivh /tmp/splunk-forwarder-latest.rpm
wget http://repo.live.aide.oit.va.gov/deploymentclient.conf -P /opt/splunkforwarder/etc/system/local/
/opt/splunkforwarder/bin/splunk start --accept-license --no-prompt
/opt/splunkforwarder/bin/splunk enable boot-start
'

#  Sendmail

sed -i 's/inet_protocols = all/inet_protocols = ipv4/g' /etc/postfix/main.cf
sed -i 's/#relayhost = \$mydomain/relayhost = smtp\.va\.gov/g' /etc/postfix/main.cf