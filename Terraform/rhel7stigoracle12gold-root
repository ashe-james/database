#  ami-d291e2b3
#  /u01 nopatch (sdb) snap: snap-088cee88592c1b4e0
#  /u01 20190115 (sdb) snap: snap-0395d4b4858ab817a
#  /backup (sdc) snap: snap-0e5b6766079dba4e8

#  CREATING GOLD server
#  /dev/sdb: 100GB, /dev/sdc: 50GB - use backup (sdc) snap, do not mount /diag

#  CREATING DEPLOYMENT server
#  /dev/sdb: 100GB - use u01 20190115 (sdb) snap, /dev/sdc: desired size of /backup, /dev/sdd: desired size of diag

#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #

#  ami-d291e2b3 error fix: "-bash: TMOUT: readonly variable"
#  The TMOUT variable is set both in /etc/profile.d/tmout.sh and /etc/profile.  This removes the /etc/profile entry.

sed -i.bu '/TMOUT/d' /etc/profile


#  Variables

GRID_HOME=/u01/app/grid/12.2.0.1
ORACLE_HOME=/u01/app/oracle/product/12.2.0.1/db


#  OPERATING SYSTEM CHANGES
#  packages

yum-config-manager --enable rhui-REGION-rhel-server-optional

yum clean all
yum update -y

yum install firewalld -y
yum install nvme-cli -y
yum install psmisc -y
yum install sssd -y
yum install unzip -y
yum install zip -y
yum install zstd -y

yum install bc -y
yum install compat-libcap1.x86_64 -y
yum install compat-libstdc++-33.x86_64 -y
yum install gcc -y
yum install gcc-c++ -y
yum install glibc-devel.x86_64 -y
yum install kmod-oracleasm -y
yum install ksh -y
yum install libaio.x86_64 -y
yum install libaio-devel.x86_64 -y
yum install libstdc++-devel.x86_64 -y
yum install libxcb.x86_64 -y
yum install libX11.x86_64 -y
yum install libXau.x86_64 -y
yum install libXi.x86_64 -y
yum install libXtst.x86_64 -y
yum install libXrender.x86_64 -y
yum install libXrender-devel.x86_64 -y
rpm -Uvh http://download.oracle.com/otn_software/asmlib/oracleasmlib-2.0.12-1.el7.x86_64.rpm
rpm -Uvh https://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracleasm-support-2.1.11-2.el7.x86_64.rpm
yum install nfs-utils.x86_64 -y
yum install smartmontools.x86_64 -y
yum install sysstat.x86_64 -y


#  awscli

if [ ! -x "$( command -v "aws" )" ]; then

        curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        unzip awscli-bundle.zip
        ./awscli-bundle/install -i ~/.local/aws -b /bin/aws
        mkdir ~/.aws

cat <<EOT > ~/.aws/config
[default]
region = us-gov-west-1
EOT

fi

INSTANCE_ID=$(curl -s "http://169.254.169.254/latest/meta-data/instance-id")


#  disable transparent hugepages

sed -i '/GRUB_CMDLINE_LINUX/ s/\"$/ transparent_hugepage=never\"/g' /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg


#  disk i/o scheduling

echo "ACTION==\"add|change\", KERNEL==\"sd[b-z]\", ATTR{queue/rotational}==\"0\", ATTR{queue/scheduler}=\"deadline\"" > /etc/udev/rules.d/60-oracle-schedulers.rules
udevadm control --reload-rules


#  swapfile

SWAP_MB=$( expr $( grep MemTotal /proc/meminfo | awk '{ print $2 }' ) / 976 )

if [[ $SWAP_MB -gt 16170 ]]; then
        SWAP_MB=16170
fi

dd if=/dev/zero of=/opt/swapfile bs=1MB count=$SWAP_MB
chmod 0600 /opt/swapfile
mkswap /opt/swapfile
swapon /opt/swapfile


#  fstab

sed -i.bu '/vg0-swap/d' /etc/fstab
echo "/opt/swapfile                                 swap                    swap    defaults        0 0" >> /etc/fstab


#  hostname

INSTANCE_HOSTNAME=$( aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=Name" --query 'Tags[*].Value' --output text | tr '[:upper:]' '[:lower:]' )
INSTANCE_ENV=$( aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=Environment" --query 'Tags[*].Value' --output text | tr '[:upper:]' '[:lower:]' )

IP_ADDRESS=$(curl -s "http://169.254.169.254/latest/meta-data/local-ipv4")

DNSNAME=$INSTANCE_HOSTNAME.$INSTANCE_ENV.vbms.aide.oit.va.gov
hostnamectl set-hostname $DNSNAME
echo "$IP_ADDRESS   $DNSNAME $INSTANCE_HOSTNAME" >> /etc/hosts
echo "HOSTNAME=$DNSNAME" >> /etc/sysconfig/network


#  dns

#  ami-d291e2b3 error fix: Job for sssd.service failed because the control process exited with error code.
mv /etc/sssd/sssd.conf /etc/sssd/sssd.conf_removed

service sssd start

REV_IP=$( echo $IP_ADDRESS | awk -F'.' '{print $4,".",$3,".",$2,"."$1}' | tr -d [:space:] )
REV_ZONE=$( echo $IP_ADDRESS | awk -F'.' '{print $3,".",$2,"."$1}' | tr -d [:space:] )

cat <<EOT > register_host.txt
update delete $DNSNAME A
update add $DNSNAME 86400 A $IP_ADDRESS

zone $REV_ZONE.in-addr.arpa
update delete $REV_IP.in-addr.arpa PTR

zone $REV_ZONE.in-addr.arpa
update add $REV_IP.in-addr.arpa 86400 PTR $DNSNAME

send
EOT

nsupdate register_host.txt


#  firewalld

systemctl mask iptables
systemctl enable firewalld
service firewalld start
firewall-cmd --add-port=1521/tcp --set-short="Incoming Rule for Database" --permanent
firewall-cmd --add-port=3872/tcp --set-short="Incoming Rule for OEM Agent" --permanent


#  disable ipv6

cat <<EOT >/etc/sysctl.d/96-disableipv6-sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
EOT

sysctl --system


#  users

groupadd -g 5001 oinstall
groupadd -g 5002 dba
useradd -u 5000 -g oinstall -G dba oracle

echo "umask 022" >> /home/oracle/.bash_profile


#  DISK CHANGES
#  symlink NVMe to block

for i in `seq 0 26`; do
    BLOCK_DEVICE="/dev/nvme${i}n1"

    if [ -e $BLOCK_DEVICE ]; then

        VOLUME_ID=$( nvme id-ctrl $BLOCK_DEVICE | grep sn | awk '{ print $3 }' | sed -r -e 's/^.{3}/&-/' )

        MAPPING_DEVICE=$( aws ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" "Name=volume-id,Values=$VOLUME_ID" --query 'Volumes[*].Attachments[*].Device' --output text )

        if [[ "$MAPPING_DEVICE" != /dev/* ]]; then
            MAPPING_DEVICE="/dev/${MAPPING_DEVICE}"
        fi

        if [ -e $MAPPING_DEVICE ]; then
            echo "path exists: ${MAPPING_DEVICE}"

        else
            echo "symlink created: ${BLOCK_DEVICE} to ${MAPPING_DEVICE}"
            ln -s $BLOCK_DEVICE $MAPPING_DEVICE
        fi

    fi
done


#  partition unformatted volumes

VOLUMES=$( aws ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" --query 'Volumes[*].Attachments[*].Device' --output text | sort )
VOLARRAY=( $VOLUMES )

for V in "${VOLARRAY[@]}"; do 
        DEVICE=$( readlink -f $V )
        if [ "$( file -b -s $DEVICE )" == "data" ]; then
                 echo -e "o\nn\np\n1\n\n\nw" | fdisk "$DEVICE"
        fi
done


#  mount /u01, format if necessary

DEVICE_sdb=$( readlink -f /dev/sdb )
P=$( lsblk -nl $DEVICE_sdb -o NAME,TYPE | grep part | cut -d ' ' -f1 )
NEW_u01=false

if [ -n "$P" ]; then
        mkdir /u01

        PARTITION="/dev/$P"

        if [ "$( file -b -s $PARTITION )" == "data" ]; then
                mkfs -t ext4 $PARTITION
                NEW_u01=true
        fi

        UUID=$( blkid | grep $PARTITION | awk -F' UUID=\"' '{ print $2 }' | awk -F"\"" '{ print $1 }' )
        echo "UUID=$UUID /u01                    ext4    defaults,nofail 0 2" >> /etc/fstab
        mount -a
fi


#  mount backup, format if necessary

DEVICE_sdc=$( readlink -f /dev/sdc )
P=$( lsblk -nl $DEVICE_sdc -o NAME,TYPE | grep part | cut -d ' ' -f1 )
NEW_backup=false

if [ -n "$P" ]; then
        mkdir /backup
        
        PARTITION="/dev/$P"

        if [ "$( file -b -s $PARTITION )" == "data" ]; then
                mkfs -t ext4 $PARTITION
                NEW_backup=true
        fi

        UUID=$( blkid | grep $PARTITION | awk -F' UUID=\"' '{ print $2 }' | awk -F"\"" '{ print $1 }' )
        echo "UUID=$UUID /backup                 ext4    defaults,nofail 0 2" >> /etc/fstab
        mount -a
fi


#  mount diag, format if necessary

DEVICE_sdd=$( readlink -f /dev/sdd )
P=$( lsblk -nl $DEVICE_sdd -o NAME,TYPE | grep part | cut -d ' ' -f1 )
NEW_diag=false

if [ -n "$P" ]; then
        mkdir /diag

        PARTITION="/dev/$P"

        if [ "$( file -b -s $PARTITION )" == "data" ]; then
                mkfs -t ext4 $PARTITION
                NEW_diag=true
        fi

        UUID=$( blkid | grep $PARTITION | awk -F' UUID=\"' '{ print $2 }' | awk -F"\"" '{ print $1 }' )
        echo "UUID=$UUID /diag                   ext4    defaults,nofail 0 2" >> /etc/fstab
        mount -a
fi


#  oracleasm

oracleasm configure -u oracle -g dba -e -s y 
oracleasm init

####  NEEDS LOGIC

MOUNTARRAY=( /dev/sde /dev/sdf /dev/sdg /dev/sdh )
LABELARRAY=( DATA1 DATA2 FRA1 FRA2 )

for I in "${!MOUNTARRAY[@]}"; do 
        L=$( readlink -f ${MOUNTARRAY[$I]} )
        P=$( lsblk -nl $L -o NAME,TYPE | grep part | cut -d ' ' -f1 )
        PARTITION="/dev/$P"
        oracleasm createdisk "${LABELARRAY[$I]}" "${PARTITION}"  
done

####  NEEDS LOGIC

oracleasm scandisks


#  ORACLE CHANGES
#  sysctl

SHMALL=$( expr $( grep MemTotal /proc/meminfo | awk '{ print $2 }' ) \* 1024 / 4096 \* 4 / 10 )
SHMMAX=$( expr $( grep MemTotal /proc/meminfo | awk '{ print $2 }' ) \* 1024 \* 5 / 10 )

cat <<EOT >/etc/sysctl.d/97-oracledatabase-sysctl.conf
fs.aio-max-nr = 1048576
fs.file-max = 6815744
kernel.shmall = $SHMALL
kernel.shmmax = $SHMMAX
kernel.shmmni = 4096
kernel.sem = 250 32000 100 128
net.ipv4.ip_local_port_range = 9000 65500
net.core.rmem_default = 262144
net.core.rmem_max = 4194304
net.core.wmem_default = 262144
net.core.wmem_max = 1048576
EOT

sysctl --system


#  limits 

cat <<EOT > /etc/security/limits.d/97-oracledatabase-limits.conf
oracle           soft    nofile          1024
oracle           hard    nofile          65536
oracle           soft    nproc           2047
oracle           hard    nproc           16384
oracle           soft    stack           10240
oracle           hard    stack           32768
oracle           soft    memlock         3145728
oracle           hard    memlock         3145728
EOT


#  oraInst

cat <<EOT > /etc/oraInst.loc
inventory_loc=/u01/app/oraInventory
inst_group=oinstall
EOT


#  oracle directory structure

if $NEW_u01; then
        mkdir -p /u01/app/oraInventory
        mkdir -p /u01/app/grid
        mkdir -p /u01/app/oracle
        chown -R oracle:oinstall /u01/app/oraInventory
        chown -R oracle:oinstall /u01/app/grid
        chown -R oracle:oinstall /u01/app/oracle
        chmod -R 775 /u01
fi

if $NEW_diag; then
        if [[ -d /u01/app/oracle/diag ]]; then
                mv /u01/app/oracle/diag/* /diag
                rmdir /u01/app/oracle/diag
        fi
        chown oracle:oinstall /diag
        chmod 775 /diag     
        ln -s /diag /u01/app/oracle
fi


#  Oracle Grid Infrastructure

if [[ -f $GRID_HOME/root.sh ]]; then
 
        $GRID_HOME/perl/bin/perl -I $GRID_HOME/perl/lib -I $GRID_HOME/crs/install $GRID_HOME/crs/install/roothas.pl
        $GRID_HOME/root.sh
        $GRID_HOME/bin/srvctl add listener -l LISTENER
        $GRID_HOME/bin/srvctl start listener

        echo "GRID_HOME=$GRID_HOME" > /home/oracle/configureASM.sh

echo '
PASSWORD_SYS=$( cat /dev/urandom | tr -dc "'"a-zA-Z"'" | fold -w 1 | head -n 1 )$( cat /dev/urandom | tr -dc "'"a-zA-Z0-9"'" | fold -w 15 | head -n 1 )
PASSWORD_ASM=$( cat /dev/urandom | tr -dc "'"a-zA-Z"'" | fold -w 1 | head -n 1 )$( cat /dev/urandom | tr -dc "'"a-zA-Z0-9"'" | fold -w 15 | head -n 1 )

DISKLIST_DATA=$( ls -dm /dev/oracleasm/disks/DATA* | tr -d "'"[:space:]"'" )
DISKLIST_FRA=$( ls -dm /dev/oracleasm/disks/FRA* | tr -d "'"[:space:]"'" )

$GRID_HOME/bin/asmca -silent -configureASM \
-sysAsmPassword "${PASSWORD_SYS}" \
-asmsnmpPassword "${PASSWORD_ASM}" \
-diskString "'"/dev/oracleasm/disks/*"'" \
-diskGroupName DATA \
-diskList "${DISKLIST_DATA}" \
-redundancy NORMAL \
-au_size 4

$GRID_HOME/bin/asmca -silent -createDiskGroup \
-sysAsmPassword "${PASSWORD_SYS}" \
-diskString "'"/dev/oracleasm/disks/*"'" \
-diskGroupName FRA \
-diskList "${DISKLIST_FRA}" \
-redundancy NORMAL \
-au_size 4
' >> /home/oracle/configureASM.sh

        chmod +x /home/oracle/configureASM.sh
        sudo -u oracle /home/oracle/configureASM.sh

        $GRID_HOME/bin/crsctl modify resource ora.asm -attr AUTO_START=always -unsupported
        $GRID_HOME/bin/crsctl modify resource ora.LISTENER.lsnr -attr AUTO_START=always -unsupported

fi


#  Oracle Database

if [[ -f $ORACLE_HOME/root.sh ]]; then
        $ORACLE_HOME/root.sh
fi


#  Enterprise Manager Agent

if [[ -f $GRID_HOME/root.sh && -f $ORACLE_HOME/root.sh ]]; then

        curl "https://10.247.101.166:7802/em/install/getAgentImage" --insecure -o /home/oracle/AgentPull.sh
        chown oracle:oinstall /home/oracle/AgentPull.sh
        chmod +x /home/oracle/AgentPull.sh

cat <<EOT > /home/oracle/AgentPull.rsp
LOGIN_USER=SCRIPT
LOGIN_PASSWORD=AyTJmXNHmDhEMxGxnqGsSJCF
PLATFORM="Linux x86-64"
AGENT_REGISTRATION_PASSWORD=rRwhte7o9Ec2PbOt
AGENT_BASE_DIR=/u01/app/oracle/agent
ORACLE_HOSTNAME=$( hostname | cut -d "." -f1 | tr '[:lower:]' '[:upper:]' ).$( hostname | cut -d "." -f2- | tr '[:upper:]' '[:lower:]' )
EOT

        chown oracle:oinstall /home/oracle/AgentPull.rsp
        sudo -u oracle /home/oracle/AgentPull.sh RSPFILE_LOC=/home/oracle/AgentPull.rsp

        /u01/app/oracle/agent/agent_13.3.0.0.0/root.sh

fi