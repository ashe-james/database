#!/usr/bin/env bash

#  GLOBAL CHANGES
#  remove password expiration from ec2-user
chage -M -1 -E -1 ec2-user


#  VARIABLES
GRID_HOME=/u01/app/19.0.0/grid
ORACLE_HOME_11=/u01/app/oracle/product/11.2.0.4/db
ORACLE_HOME_12=/u01/app/oracle/product/12.2.0.1/db
ORACLE_HOME_19=/u01/app/oracle/product/19.0.0/db
RMAN_S3_BUCKET=rman-test


#  VA Certificate Update
cd /etc/pki/ca-trust/source/
sudo wget http://crl.pki.va.gov/PKI/AIA/VA/VA-Internal-S2-RCA1-v1.cer
sudo cp /etc/pki/ca-trust/source/VA-Internal-S2-RCA1-v1.cer /etc/pki/ca-trust/source/anchors/
sudo update-ca-trust enable
sudo update-ca-trust extract
cd /home/ec2-user


#  OPERATING SYSTEM CHANGES
#  packages
yum-config-manager --enable rhui-REGION-rhel-server-optional
yum install wget -y
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
yum clean all
yum update -y

yum install cloud-utils-growpart -y
yum install firewalld -y
yum install jq -y
yum install nvme-cli -y
yum install psmisc -y
yum install sssd -y
yum install tmux -y
yum install unzip -y
yum install zip -y
yum install zstd -y

yum install bc -y # 12c 19
yum install binutils.x86_64 -y # db11 grid11 12c1 19
yum install compat-libcap1.x86_64 -y # db11 grid11 12c 19
yum install compat-libstdc++-33.x86_64 -y # db11 12c 19
yum install elfutils-libelf # 19
yum install elfutils-libelf-devel # 19
yum install fontconfig-devel # 19
yum install gcc -y # db11 grid11
yum install gcc-c++ -y # db11 grid11
yum install glibc.x86_64 -y # db11 grid11 12c 19
yum install glibc-devel.x86_64 -y # db11 grid11 12c 19
yum install java-1.8.0 -y # osbws
yum install kmod-oracleasm -y # asm
yum install ksh -y # db11 grid11 12c 19
yum install libaio.x86_64 -y # db11 grid11 12c 19
yum install libaio-devel.x86_64 -y # db11 grid11 12c 19
yum install libgcc.x86_64 -y # db11 grid11 12c 19
yum install libstdc++.x86_64 -y # db11 grid11 12c 19
yum install libstdc++-devel.x86_64 -y # db11 grid11 12c 19
yum install libxcb.x86_64 -y # 12c 19
yum install libX11.x86_64 -y # 12c 19
yum install libXau.x86_64 -y # 12c 19
yum install libXi.x86_64 -y # db11 grid11 12c 19
yum install libXtst.x86_64 -y # db11 grid11 12c 19
yum install libXrender.x86_64 -y # 12c 19
yum install libXrender-devel.x86_64 -y # 12c 19
yum install make.x84_64 -y # db11 grid11 12c 19
yum install net-tools.x86_64 -y # 12c 19
rpm -Uvh http://download.oracle.com/otn_software/asmlib/oracleasmlib-2.0.12-1.el7.x86_64.rpm # asm
rpm -Uvh https://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracleasm-support-2.1.11-2.el7.x86_64.rpm # asm
yum install nfs-utils.x86_64 -y # 12c 19
yum install smartmontools.x86_64 -y # 12c 19
yum install sysstat.x86_64 -y # db11 grid11 12c 19

#  aws
curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
unzip awscli-bundle.zip
./awscli-bundle/install -i ~/.local/aws -b /bin/aws
mkdir ~/.aws

cat <<EOT > ~/.aws/config
[default]
region = us-gov-west-1
EOT

INSTANCE_ID=$(curl -s "http://169.254.169.254/latest/meta-data/instance-id")

#  hostname
#
#  DURING THE RAC > NON-RAC CONVERSION, CNAMES FOR SCAN LISTENERS WERE CREATED TO ALLOW FOR CONNECTIVITY WITHOUT UPDATING
#  DATABASE CONNECTION STRINGS.  PLEASE VERIFY THE CNAME FOR THE FORMER SCAN LISTENER EXISTS IN DNS, IF APPLICABLE.
AWSTAGS=$( aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" )

INSTANCE_HOSTNAME=$( echo $AWSTAGS | jq -r '.[][] | select(.Key == "Name") | .Value' | tr '[:upper:]' '[:lower:]' )
INSTANCE_ENV=$( echo $AWSTAGS | jq -r '.[][] | select(.Key == "env") | .Value' | tr '[:upper:]' '[:lower:]' )

IP_ADDRESS=$( curl -s "http://169.254.169.254/latest/meta-data/local-ipv4" )

DNSNAME=$INSTANCE_HOSTNAME.$INSTANCE_ENV.vbms.aide.oit.va.gov
hostnamectl set-hostname $DNSNAME
echo "$IP_ADDRESS   $DNSNAME $INSTANCE_HOSTNAME" >> /etc/hosts
echo "HOSTNAME=$DNSNAME" >> /etc/sysconfig/network

#  dns
REV_IP=$( echo $IP_ADDRESS | awk -F'.' '{print $4,".",$3,".",$2,"."$1}' | tr -d [:space:] )
REV_ZONE=$( echo $IP_ADDRESS | awk -F'.' '{print $3,".",$2,"."$1}' | tr -d [:space:] )

cat <<EOT > register_host.txt
update delete $DNSNAME A
update add $DNSNAME 86400 A $IP_ADDRESS

zone $REV_ZONE.in-addr.arpa
update delete $REV_IP.in-addr.arpa PTR

zone $REV_ZONE.in-addr.arpa
update add $REV_IP.in-addr.arpa 86400 PTR $DNSNAME

send
EOT

nsupdate register_host.txt

#  firewalld
systemctl mask iptables
systemctl enable firewalld
service firewalld start

setenforce 0
firewall-cmd --add-port=1521/tcp --set-short="Ingress Rule for Database" --permanent
firewall-cmd --add-port=3872/tcp --set-short="Ingress Rule for OEM Agent" --permanent
firewall-cmd --reload
setenforce 1

#  disable ipv6
cat <<EOT >/etc/sysctl.d/96-disableipv6-sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
EOT

#  disable transparent hugepages
sed -i '/GRUB_CMDLINE_LINUX/ s/\"$/ transparent_hugepage=never\"/g' /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg

#  set hugepages
cat <<EOT >/etc/sysctl.d/96-hugepages-sysctl.conf
vm.nr_hugepages = 3076
EOT

sysctl --system


#  ntpd fix for Grid Infrastructure 11.2 installation
mv /etc/ntp.conf /etc/ntp.conf.renamed

#  users
groupadd -g 5001 oinstall
groupadd -g 5002 dba
useradd -u 5000 -g oinstall -G dba oracle
chage -M -1 -E -1 oracle

echo "umask 022" >> /home/oracle/.bash_profile

#  DISK CHANGES
AWSVOLUMES=$( aws ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" )

TOTAL_VOLUMES=$( echo $AWSVOLUMES | jq -r '.[][] | .VolumeId' | wc -l  )
INUSE_VOLUMES=-1
    
until [ "$INUSE_VOLUMES" -eq "$TOTAL_VOLUMES" ]; do
      
    INUSE_VOLUMES=$( aws ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" "Name=status,Values=in-use" --query 'Volumes[*].Attachments[*].VolumeId' --output text | wc -l )
    sleep 5

done

#  symlink NVMe to block
AWSVOLUMES=$( aws ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" )

for i in `seq 0 26`; do
    BLOCK_DEVICE="/dev/nvme$${i}n1"

    if [ -e $BLOCK_DEVICE ]; then

        VOLUME_ID=$( nvme id-ctrl $BLOCK_DEVICE | grep sn | awk '{ print $3 }' | sed -r -e 's/^.{3}/&-/' )

        MAPPING_DEVICE=$( echo $AWSVOLUMES | jq -r --arg V "$VOLUME_ID" '.[][] | .Attachments[] | select(.VolumeId == $V) | .Device' )

        if [[ "$MAPPING_DEVICE" != /dev/* ]]; then
            MAPPING_DEVICE="/dev/$MAPPING_DEVICE"
        fi

        if [ -e $MAPPING_DEVICE ]; then
            echo "path exists: $MAPPING_DEVICE"

        else
            echo "symlink created: $BLOCK_DEVICE to $MAPPING_DEVICE"
            ln -s $BLOCK_DEVICE $MAPPING_DEVICE
        fi

    fi
done

#  partition unformatted volumes
VOLUMES=$( echo $AWSVOLUMES | jq -r '.[][] | .Attachments[] | .Device' | sort )
VOLARRAY=( $VOLUMES )

for V in "$${VOLARRAY[@]}"; do 
        DEVICE=$( readlink -f $V )
        if [ "$( file -b -s $DEVICE )" == "data" ]; then
                 echo -e "o\nn\np\n1\n\n\nw" | fdisk "$DEVICE"
        fi
done

#  mount /u01, format if necessary
DEVICE_sdb=$( readlink -f /dev/sdb )
P=$( lsblk -nl $DEVICE_sdb -o NAME,TYPE | grep part | cut -d ' ' -f1 )
NEW_u01=false

if [ -n "$P" ]; then
        mkdir /u01

        PARTITION="/dev/$P"

        if [ "$( file -b -s $PARTITION )" == "data" ]; then
                mkfs -t ext4 $PARTITION
                NEW_u01=true
        fi

        UUID=$( blkid | grep $PARTITION | awk -F' UUID=\"' '{ print $2 }' | awk -F"\"" '{ print $1 }' )
        echo "UUID=$UUID /u01                    ext4    defaults,nofail 0 2" >> /etc/fstab
        mount -a
fi

#  mount diag, format if necessary
DEVICE_sdc=$( readlink -f /dev/sdc )
P=$( lsblk -nl $DEVICE_sdc -o NAME,TYPE | grep part | cut -d ' ' -f1 )
NEW_diag=false

if [ -n "$P" ]; then
        mkdir /diag
        
        PARTITION="/dev/$P"

        if [ "$( file -b -s $PARTITION )" == "data" ]; then
                mkfs -t ext4 $PARTITION
                NEW_diag=true
        fi

        UUID=$( blkid | grep $PARTITION | awk -F' UUID=\"' '{ print $2 }' | awk -F"\"" '{ print $1 }' )
        echo "UUID=$UUID /diag                   ext4    defaults,nofail 0 2" >> /etc/fstab
        mount -a
fi

#  mount efs volumes
%{ if dbshare_mount_efs_dns_name != "" }
        echo "${dbshare_mount_efs_dns_name}:/ /dbshare nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 0 0" >> /etc/fstab
        mkdir -p /dbshare
        mount -a
        chown oracle:oinstall /dbshare
        chmod g+rws /dbshare
%{ endif }

%{ if export_mount_efs_dns_name != "" }
        echo "${export_mount_efs_dns_name}:/ /vbms-exports nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 0 0" >> /etc/fstab
        mkdir -p /vbms-exports
        mount -a
        chmod g+rws /vbms-exports
%{ endif }


#  ORACLE CHANGES
#  sysctl
SHMALL=$( expr $( grep MemTotal /proc/meminfo | awk '{ print $2 }' ) \* 1024 / 4096 \* 4 / 10 )
SHMMAX=$( expr $( grep MemTotal /proc/meminfo | awk '{ print $2 }' ) \* 1024 \* 5 / 10 )
MEMLOCK=$( expr $( grep MemTotal /proc/meminfo | awk '{ print $2 }' ) \/ 100 \* 90 )

cat <<EOT >/etc/sysctl.d/97-oracledatabase-sysctl.conf
fs.aio-max-nr = 1048576
fs.file-max = 6815744
kernel.shmall = $SHMALL
kernel.shmmax = $SHMMAX
kernel.shmmni = 4096
kernel.sem = 250 32000 100 128
net.ipv4.ip_local_port_range = 9000 65500
net.core.rmem_default = 262144
net.core.rmem_max = 4194304
net.core.wmem_default = 262144
net.core.wmem_max = 1048576
EOT

sysctl --system

#  limits 
cat <<EOT > /etc/security/limits.d/97-oracledatabase-limits.conf
oracle           soft    nofile          1024
oracle           hard    nofile          65536
oracle           soft    nproc           2047
oracle           hard    nproc           16384
oracle           soft    stack           10240
oracle           hard    stack           32768
oracle           soft    memlock         $MEMLOCK
oracle           hard    memlock         $MEMLOCK
EOT

#  oraInst
cat <<EOT > /etc/oraInst.loc
inventory_loc=/u01/app/oraInventory
inst_group=oinstall
EOT

#  oracle directory structure
if $NEW_u01; then
        mkdir -p /u01/app/oraInventory
        mkdir -p $GRID_HOME
        mkdir -p /u01/app/oracle
        chown -R oracle:oinstall /u01/app/oraInventory
        chown -R oracle:oinstall $GRID_HOME
        chown -R oracle:oinstall /u01/app/oracle
        chmod -R 775 /u01
fi

if $NEW_diag; then
        if [[ -d /u01/app/oracle/diag ]]; then
                mv /u01/app/oracle/diag/* /diag
                rmdir /u01/app/oracle/diag
        fi   
fi

chown oracle:oinstall /diag
chmod 775 /diag 

if [[ -d $GRID_HOME && -d $ORACLE_HOME ]]; then
        ln -s /diag /u01/app/oracle
fi

#  Oracle Grid Infrastructure
if [[ -f $GRID_HOME/root.sh ]]; then

        $GRID_HOME/root.sh
        $GRID_HOME/perl/bin/perl -I $GRID_HOME/perl/lib -I $GRID_HOME/crs/install $GRID_HOME/crs/install/roothas.pl

        echo "GRID_HOME=$GRID_HOME" > /home/oracle/configureHAS.sh

echo '
$GRID_HOME/oui/bin/runInstaller -updateNodeList ORACLE_HOME=$GRID_HOME -defaultHomeName CLUSTER_NODES= CRS=TRUE
' >> /home/oracle/configureHAS.sh

        chmod +x /home/oracle/configureHAS.sh
        su - oracle /home/oracle/configureHAS.sh

        $GRID_HOME/bin/srvctl add listener -l LISTENER
        $GRID_HOME/bin/srvctl start listener

fi

#  oracleasm
oracleasm configure -u oracle -g dba -e -s y 
oracleasm init
oracleasm scandisks

#  ASM
if [ -z "$( ls -A /dev/oracleasm/disks )" ]; then

        DATA_COUNT=1
        FRA_COUNT=1

        for I in "$${!VOLARRAY[@]}"; do 
                VOLTAG=$( echo $AWSVOLUMES | jq -r --arg V "$${VOLARRAY[$I]}" '.Volumes[] | select(.Attachments[].Device == $V) | .Tags[] | select(.Key == "Name") | .Value' )
        
                L=$( readlink -f $${VOLARRAY[$I]} )
                P=$( lsblk -nl $L -o NAME,TYPE | grep part | cut -d ' ' -f1 )
                PARTITION="/dev/$P"

                if [[ "$VOLTAG" == *"-DATA-"* ]]; then
                        oracleasm createdisk "DATA$DATA_COUNT" "$PARTITION" 
                        ((DATA_COUNT++))
                elif [[ "$VOLTAG" == *"-FRA-"* ]]; then
                        oracleasm createdisk "FRA$FRA_COUNT" "$PARTITION" 
                        ((FRA_COUNT++))
                else
                        echo "$PARTITON is not used in DATA or FRA"
                fi
        done

        oracleasm scandisks

        if [[ -f $GRID_HOME/root.sh ]]; then

        echo "GRID_HOME=$GRID_HOME" > /home/oracle/configureASM.sh

echo '
PASSWORD_SYS=$( < /dev/urandom tr -dc A-Za-z | head -c1 )$( < /dev/urandom tr -dc A-Za-z0-9 | head -c15 )
PASSWORD_ASM=$( < /dev/urandom tr -dc A-Za-z | head -c1 )$( < /dev/urandom tr -dc A-Za-z0-9 | head -c15 )

DISKLIST_DATA=$( ls -dm /dev/oracleasm/disks/DATA* | tr -d "'"[:space:]"'" )
DISKLIST_FRA=$( ls -dm /dev/oracleasm/disks/FRA* | tr -d "'"[:space:]"'" )

$GRID_HOME/bin/asmca -silent -configureASM \
-sysAsmPassword "$PASSWORD_SYS" \
-asmsnmpPassword "$PASSWORD_ASM" \
-diskString "'"/dev/oracleasm/disks/*"'" \
-diskGroupName DATA \
-diskList "$DISKLIST_DATA" \
-redundancy EXTERNAL \
-param audit_sys_operations=FALSE \
-au_size 4

$GRID_HOME/bin/asmca -silent -createDiskGroup \
-sysAsmPassword "$PASSWORD_SYS" \
-diskString "'"/dev/oracleasm/disks/*"'" \
-diskGroupName FRA \
-diskList "$DISKLIST_FRA" \
-redundancy EXTERNAL \
-au_size 4
' >> /home/oracle/configureASM.sh

        chmod +x /home/oracle/configureASM.sh
        su - oracle /home/oracle/configureASM.sh

        fi

fi

#  Oracle Database
if [[ -f $ORACLE_HOME_11/root.sh ]]; then
        $ORACLE_HOME_11/root.sh
fi

if [[ -f $ORACLE_HOME_12/root.sh ]]; then
        $ORACLE_HOME_12/root.sh
fi

if [[ -f $ORACLE_HOME_19/root.sh ]]; then
        $ORACLE_HOME_19/root.sh
fi


#  Sendmail

sed -i 's/inet_protocols = all/inet_protocols = ipv4/g' /etc/postfix/main.cf
sed -i 's/#relayhost = \$mydomain/relayhost = smtp\.va\.gov/g' /etc/postfix/main.cf